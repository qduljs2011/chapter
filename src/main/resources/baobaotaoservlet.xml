<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	default-lazy-init="false"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-4.0.xsd 
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/mvc   
           http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<context:component-scan base-package="com.baobaotao.web"></context:component-scan>
	<!-- 默认的处理静态资源的 servlet 如果发现时静态资源 就不会屏蔽 -->
	<!--  
	<mvc:default-servlet-handler />
	-->
	<!-- 第二种处理静态资源的方法  可以配置多个资源地址 cache-period="" 缓存时间-->
	<mvc:resources location="/" mapping="/resources/**" />
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="false">
			<bean id="fastJsonHttpMessageConverter"
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 视图解析器 -->
	<!-- freemarker解析器 -->
	<bean
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"
		p:templateLoaderPath="/WEB-INF/ftl" p:defaultEncoding="UTF-8">
		<property name="freemarkerSettings">
			<props>
				<prop key="classic_compatible">true</prop>
			</props>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"
		p:order="5" p:contentType="text/html;charset=utf-8" p:suffix=".ftl" />
	<!-- jstl解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp" />
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		p:messageConverters-ref="messageConverts" /> <util:list id="messageConverts"> 
		<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter" 
		/> <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" 
		/> <bean class="org.springframework.http.converter.StringHttpMessageConverter" 
		/> <bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" 
		/> <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/> 
		<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter" 
		p:marshaller-ref="xmlMarshaller" p:unmarshaller-ref="xmlMarshaller"/> <bean 
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/> 
		</util:list> <bean id="xmlMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller" 
		/> -->
</beans>